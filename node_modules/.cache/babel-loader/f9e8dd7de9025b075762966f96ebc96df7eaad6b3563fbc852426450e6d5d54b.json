{"ast":null,"code":"// src/gameLogic.js\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nexport const generateWordSet = async () => {\n  const response = await fetch('https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt');\n  const words = await response.text();\n  const wordArr = words.split('\\n');\n  const wordSet = new Set(wordArr.filter(word => word.length === WORD_LENGTH));\n  return {\n    wordSet,\n    todaysWord: Array.from(wordSet)[Math.floor(Math.random() * wordSet.size)]\n  };\n};\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArr = guess.split('');\n  const correctArr = correctWord.split('');\n  const result = Array(WORD_LENGTH).fill('absent');\n\n  // Check for correct letters in correct positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (guessArr[i] === correctArr[i]) {\n      result[i] = 'correct';\n      correctArr[i] = null;\n    }\n  }\n\n  // Check for correct letters in wrong positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (result[i] === 'absent' && correctArr.includes(guessArr[i])) {\n      result[i] = 'present';\n      correctArr[correctArr.indexOf(guessArr[i])] = null;\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["WORD_LENGTH","MAX_GUESSES","generateWordSet","response","fetch","words","text","wordArr","split","wordSet","Set","filter","word","length","todaysWord","Array","from","Math","floor","random","size","evaluateGuess","guess","correctWord","guessArr","correctArr","result","fill","i","includes","indexOf"],"sources":["/home/chirag/Documents/GitHub/wordle/src/gameLogic.js"],"sourcesContent":["// src/gameLogic.js\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nexport const generateWordSet = async () => {\n  const response = await fetch('https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt');\n  const words = await response.text();\n  const wordArr = words.split('\\n');\n  const wordSet = new Set(wordArr.filter(word => word.length === WORD_LENGTH));\n  return { wordSet, todaysWord: Array.from(wordSet)[Math.floor(Math.random() * wordSet.size)] };\n};\n\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArr = guess.split('');\n  const correctArr = correctWord.split('');\n  const result = Array(WORD_LENGTH).fill('absent');\n\n  // Check for correct letters in correct positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (guessArr[i] === correctArr[i]) {\n      result[i] = 'correct';\n      correctArr[i] = null;\n    }\n  }\n\n  // Check for correct letters in wrong positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (result[i] === 'absent' && correctArr.includes(guessArr[i])) {\n      result[i] = 'present';\n      correctArr[correctArr.indexOf(guessArr[i])] = null;\n    }\n  }\n\n  return result;\n};"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,CAAC;AACrB,MAAMC,WAAW,GAAG,CAAC;AAErB,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6EAA6E,CAAC;EAC3G,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACnC,MAAMC,OAAO,GAAGF,KAAK,CAACG,KAAK,CAAC,IAAI,CAAC;EACjC,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAACH,OAAO,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKb,WAAW,CAAC,CAAC;EAC5E,OAAO;IAAES,OAAO;IAAEK,UAAU,EAAEC,KAAK,CAACC,IAAI,CAACP,OAAO,CAAC,CAACQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,OAAO,CAACW,IAAI,CAAC;EAAE,CAAC;AAC/F,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EACnD,MAAMC,QAAQ,GAAGF,KAAK,CAACd,KAAK,CAAC,EAAE,CAAC;EAChC,MAAMiB,UAAU,GAAGF,WAAW,CAACf,KAAK,CAAC,EAAE,CAAC;EACxC,MAAMkB,MAAM,GAAGX,KAAK,CAACf,WAAW,CAAC,CAAC2B,IAAI,CAAC,QAAQ,CAAC;;EAEhD;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,WAAW,EAAE4B,CAAC,EAAE,EAAE;IACpC,IAAIJ,QAAQ,CAACI,CAAC,CAAC,KAAKH,UAAU,CAACG,CAAC,CAAC,EAAE;MACjCF,MAAM,CAACE,CAAC,CAAC,GAAG,SAAS;MACrBH,UAAU,CAACG,CAAC,CAAC,GAAG,IAAI;IACtB;EACF;;EAEA;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,WAAW,EAAE4B,CAAC,EAAE,EAAE;IACpC,IAAIF,MAAM,CAACE,CAAC,CAAC,KAAK,QAAQ,IAAIH,UAAU,CAACI,QAAQ,CAACL,QAAQ,CAACI,CAAC,CAAC,CAAC,EAAE;MAC9DF,MAAM,CAACE,CAAC,CAAC,GAAG,SAAS;MACrBH,UAAU,CAACA,UAAU,CAACK,OAAO,CAACN,QAAQ,CAACI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;IACpD;EACF;EAEA,OAAOF,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}