{"ast":null,"code":"var _jsxFileName = \"/home/chirag/Documents/GitHub/wordle/src/Wordle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from '@emotion/styled';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet, evaluateGuess } from './gameLogic';\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: 'Arial', sans-serif;\n  background-color: #121213;\n  color: white;\n  min-height: 100vh;\n  padding: 20px;\n`;\n_c = Container;\nconst Title = styled.h1`\n  font-size: 2.5rem;\n  margin-bottom: 1rem;\n`;\n_c2 = Title;\nconst Grid = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${MAX_GUESSES}, 1fr);\n  gap: 5px;\n  margin-bottom: 1rem;\n`;\n_c3 = Grid;\nconst Row = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${WORD_LENGTH}, 1fr);\n  gap: 5px;\n`;\n_c4 = Row;\nconst Cell = styled(motion.div)`\n  width: 60px;\n  height: 60px;\n  border: 2px solid #3a3a3c;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n_c5 = Cell;\nconst keyboardColors = ['#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'];\nconst Keyboard = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  background-color: black;\n  padding: 15px;\n  border-radius: 10px;\n  margin-top: 20px;\n  width: 90%;\n  max-width: 1000px;\n`;\n_c6 = Keyboard;\nconst KeyboardRow = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n`;\n_c7 = KeyboardRow;\nconst Key = styled(motion.button)`\n  padding: 15px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  background-color: ${props => props.color};\n  color: black;\n  min-width: 40px;\n  flex: ${props => props.flex || 1};\n\n  &:hover {\n    filter: brightness(90%);\n  }\n`;\n_c8 = Key;\nconst KeyboardTitle = styled.h2`\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 15px 0;\n`;\n_c9 = KeyboardTitle;\nconst Wordle = () => {\n  _s();\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [gameplayAudio] = useState(new Audio(gameplaySound));\n  const [gameoverAudio] = useState(new Audio(gameoverSound));\n  const [gamewinAudio] = useState(new Audio(gamewinSound));\n  useEffect(() => {\n    // Autoplay workaround\n    const playPromise = gameplayAudio.play();\n    if (playPromise !== undefined) {\n      playPromise.then(_ => {\n        // Autoplay started\n      }).catch(error => {\n        console.error('Autoplay failed:', error);\n      });\n    }\n\n    // Setup gameplay audio loop\n    gameplayAudio.loop = true;\n\n    // Cleanup function for unmounting\n    return () => {\n      gameplayAudio.pause();\n    };\n  }, []); // Empty dependency array ensures it runs only once on mount\n\n  useEffect(() => {\n    const fetchWord = async () => {\n      setLoading(true);\n      const {\n        wordSet,\n        todaysWord\n      } = await generateWordSet();\n      setWordSet(wordSet);\n      setCorrectWord(todaysWord);\n      setLoading(false);\n    };\n    fetchWord();\n  }, []);\n  const handleKeyPress = useCallback(key => {\n    if (gameOver || loading) return;\n    if (key === 'ENTER' || key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n      if (!wordSet.has(currentGuess)) {\n        alert('Not in word list');\n        return;\n      }\n      const newGuesses = [...guesses];\n      newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess;\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n      if (currentGuess === correctWord) {\n        setGameOver(true);\n        triggerConfetti(); // Trigger confetti animation\n        playGamewinSound(); // Play win sound effect\n        alert('You won!');\n      } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n        setGameOver(true);\n        playGameoverSound(); // Play game over sound effect\n        alert(`Game over! The word was ${correctWord}`);\n      } else {\n        playGameplaySound(); // Play gameplay sound effect\n      }\n    } else if (key === 'BACK' || key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n      setCurrentGuess(prev => prev + key.toUpperCase());\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      handleKeyPress(event.key);\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]); // Include handleKeyPress in dependency array\n\n  const keyboardLayout = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']];\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, []);\n  const triggerConfetti = () => {\n    const end = Date.now() + 3 * 1000; // 3 seconds\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n    const frame = () => {\n      if (Date.now() > end) return;\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 0,\n          y: 0.5\n        },\n        colors: colors\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 1,\n          y: 0.5\n        },\n        colors: colors\n      });\n      requestAnimationFrame(frame);\n    };\n    frame();\n  };\n  const playGameplaySound = () => {\n    gameplayAudio.currentTime = 0;\n    gameplayAudio.play();\n  };\n  const playGameoverSound = () => {\n    gameoverAudio.currentTime = 0;\n    gameoverAudio.play();\n  };\n  const playGamewinSound = () => {\n    gamewinAudio.currentTime = 0;\n    gamewinAudio.play();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(Row, {\n        children: Array.from({\n          length: WORD_LENGTH\n        }).map((_, j) => /*#__PURE__*/_jsxDEV(Cell, {\n          initial: {\n            scale: 1\n          },\n          animate: {\n            scale: [1, 1.1, 1],\n            rotate: [0, 10, -10, 0],\n            backgroundColor: guess ? evaluateGuess(guess, correctWord)[j] === 'correct' ? '#6aaa64' : evaluateGuess(guess, correctWord)[j] === 'present' ? '#c9b458' : '#3a3a3c' : 'transparent',\n            color: guess ? '#fff' : '#fff'\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: guess ? guess[j] : ''\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }, this))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      children: [/*#__PURE__*/_jsxDEV(KeyboardTitle, {\n        children: \"Keyboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), keyboardLayout.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(KeyboardRow, {\n        children: row.map((key, keyIndex) => /*#__PURE__*/_jsxDEV(Key, {\n          color: keyColors[key],\n          whileHover: {\n            scale: 1.1\n          },\n          whileTap: {\n            scale: 0.9\n          },\n          onClick: () => handleKeyPress(key),\n          children: key\n        }, keyIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(Wordle, \"vh+pIbAIrWIgLk631dUdnAa6NTI=\");\n_c10 = Wordle;\nexport default Wordle;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"Grid\");\n$RefreshReg$(_c4, \"Row\");\n$RefreshReg$(_c5, \"Cell\");\n$RefreshReg$(_c6, \"Keyboard\");\n$RefreshReg$(_c7, \"KeyboardRow\");\n$RefreshReg$(_c8, \"Key\");\n$RefreshReg$(_c9, \"KeyboardTitle\");\n$RefreshReg$(_c10, \"Wordle\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","styled","motion","confetti","generateWordSet","evaluateGuess","gameplaySound","gameoverSound","gamewinSound","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_GUESSES","Container","div","_c","Title","h1","_c2","Grid","_c3","Row","_c4","Cell","_c5","keyboardColors","Keyboard","_c6","KeyboardRow","_c7","Key","button","props","color","flex","_c8","KeyboardTitle","h2","_c9","Wordle","_s","wordSet","setWordSet","Set","correctWord","setCorrectWord","guesses","setGuesses","Array","fill","currentGuess","setCurrentGuess","gameOver","setGameOver","loading","setLoading","gameplayAudio","Audio","gameoverAudio","gamewinAudio","playPromise","play","undefined","then","_","catch","error","console","loop","pause","fetchWord","todaysWord","handleKeyPress","key","length","has","alert","newGuesses","findIndex","guess","triggerConfetti","playGamewinSound","playGameoverSound","playGameplaySound","prev","slice","match","toUpperCase","handleKeyDown","event","window","addEventListener","removeEventListener","keyboardLayout","keyColors","colors","flat","forEach","index","end","Date","now","frame","particleCount","angle","spread","startVelocity","origin","x","y","requestAnimationFrame","currentTime","children","fileName","_jsxFileName","lineNumber","columnNumber","map","i","from","j","initial","scale","animate","rotate","backgroundColor","transition","duration","row","rowIndex","keyIndex","whileHover","whileTap","onClick","_c10","$RefreshReg$"],"sources":["/home/chirag/Documents/GitHub/wordle/src/Wordle.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from '@emotion/styled';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet, evaluateGuess } from './gameLogic';\n\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: 'Arial', sans-serif;\n  background-color: #121213;\n  color: white;\n  min-height: 100vh;\n  padding: 20px;\n`;\n\nconst Title = styled.h1`\n  font-size: 2.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${MAX_GUESSES}, 1fr);\n  gap: 5px;\n  margin-bottom: 1rem;\n`;\n\nconst Row = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${WORD_LENGTH}, 1fr);\n  gap: 5px;\n`;\n\nconst Cell = styled(motion.div)`\n  width: 60px;\n  height: 60px;\n  border: 2px solid #3a3a3c;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nconst keyboardColors = [\n  '#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', \n  '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'\n];\n\nconst Keyboard = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  background-color: black;\n  padding: 15px;\n  border-radius: 10px;\n  margin-top: 20px;\n  width: 90%;\n  max-width: 1000px;\n`;\n\nconst KeyboardRow = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n`;\n\nconst Key = styled(motion.button)`\n  padding: 15px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  background-color: ${props => props.color};\n  color: black;\n  min-width: 40px;\n  flex: ${props => props.flex || 1};\n\n  &:hover {\n    filter: brightness(90%);\n  }\n`;\n\nconst KeyboardTitle = styled.h2`\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 15px 0;\n`;\n\nconst Wordle = () => {\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [gameplayAudio] = useState(new Audio(gameplaySound));\n  const [gameoverAudio] = useState(new Audio(gameoverSound));\n  const [gamewinAudio] = useState(new Audio(gamewinSound));\n\n  useEffect(() => {\n    // Autoplay workaround\n    const playPromise = gameplayAudio.play();\n    if (playPromise !== undefined) {\n      playPromise\n        .then(_ => {\n          // Autoplay started\n        })\n        .catch(error => {\n          console.error('Autoplay failed:', error);\n        });\n    }\n\n    // Setup gameplay audio loop\n    gameplayAudio.loop = true;\n\n    // Cleanup function for unmounting\n    return () => {\n      gameplayAudio.pause();\n    };\n  }, []); // Empty dependency array ensures it runs only once on mount\n\n  useEffect(() => {\n    const fetchWord = async () => {\n      setLoading(true);\n      const { wordSet, todaysWord } = await generateWordSet();\n      setWordSet(wordSet);\n      setCorrectWord(todaysWord);\n      setLoading(false);\n    };\n\n    fetchWord();\n  }, []);\n\n  const handleKeyPress = useCallback((key) => {\n    if (gameOver || loading) return;\n\n    if (key === 'ENTER' || key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n      if (!wordSet.has(currentGuess)) {\n        alert('Not in word list');\n        return;\n      }\n\n      const newGuesses = [...guesses];\n      newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess;\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n\n      if (currentGuess === correctWord) {\n        setGameOver(true);\n        triggerConfetti(); // Trigger confetti animation\n        playGamewinSound(); // Play win sound effect\n        alert('You won!');\n      } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n        setGameOver(true);\n        playGameoverSound(); // Play game over sound effect\n        alert(`Game over! The word was ${correctWord}`);\n      } else {\n        playGameplaySound(); // Play gameplay sound effect\n      }\n    } else if (key === 'BACK' || key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n      setCurrentGuess(prev => prev + key.toUpperCase());\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      handleKeyPress(event.key);\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]); // Include handleKeyPress in dependency array\n\n  const keyboardLayout = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']\n  ];\n\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, []);\n\n  const triggerConfetti = () => {\n    const end = Date.now() + 3 * 1000; // 3 seconds\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n\n    const frame = () => {\n      if (Date.now() > end) return;\n\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 0, y: 0.5 },\n        colors: colors,\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 1, y: 0.5 },\n        colors: colors,\n      });\n\n      requestAnimationFrame(frame);\n    };\n\n    frame();\n  };\n\n  const playGameplaySound = () => {\n    gameplayAudio.currentTime = 0;\n    gameplayAudio.play();\n  };\n\n  const playGameoverSound = () => {\n    gameoverAudio.currentTime = 0;\n    gameoverAudio.play();\n  };\n\n  const playGamewinSound = () => {\n    gamewinAudio.currentTime = 0;\n    gamewinAudio.play();\n  };\n\n  if (loading) {\n    return <Container><Title>Loading...</Title></Container>;\n  }\n  return (\n    <Container>\n      <Title>Wordle Clone</Title>\n      <Grid>\n        {guesses.map((guess, i) => (\n          <Row key={i}>\n            {Array.from({ length: WORD_LENGTH }).map((_, j) => (\n              <Cell\n                key={j}\n                initial={{ scale: 1 }}\n                animate={{\n                  scale: [1, 1.1, 1],\n                  rotate: [0, 10, -10, 0],\n                  backgroundColor: guess\n                    ? evaluateGuess(guess, correctWord)[j] === 'correct'\n                      ? '#6aaa64'\n                      : evaluateGuess(guess, correctWord)[j] === 'present'\n                      ? '#c9b458'\n                      : '#3a3a3c'\n                    : 'transparent',\n                  color: guess ? '#fff' : '#fff',\n                }}\n                transition={{ duration: 0.3 }}\n              >\n                {guess ? guess[j] : ''}\n              </Cell>\n            ))}\n          </Row>\n        ))}\n      </Grid>\n      <Keyboard>\n        <KeyboardTitle>Keyboard</KeyboardTitle>\n        {keyboardLayout.map((row, rowIndex) => (\n          <KeyboardRow key={rowIndex}>\n            {row.map((key, keyIndex) => (\n              <Key\n                key={keyIndex}\n                color={keyColors[key]}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={() => handleKeyPress(key)}\n              >\n                {key}\n              </Key>\n            ))}\n          </KeyboardRow>\n        ))}\n      </Keyboard>\n    </Container>\n  );\n};\n\nexport default Wordle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}