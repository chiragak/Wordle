{"ast":null,"code":"// src/gameLogic.js\n\nconst WORD_LENGTH = 5;\nconst VALID_WORDS = ['apple', 'berry', 'cherry', 'delta', 'eagle', 'flute', 'grape', 'house', 'index', 'joker', 'abide', 'baker', 'cable', 'dance', 'earth', 'flint', 'giant', 'heart', 'ivory', 'jolly', 'knock', 'lemon', 'melon', 'night', 'opera', 'plant', 'query', 'raven', 'stone', 'tiger', 'ultra', 'vivid', 'whale', 'xenon', 'yacht', 'zebra', 'badge', 'cloak', 'drift', 'eject', 'forge', 'glide', 'hound', 'inbox', 'joint', 'kneel', 'lodge', 'music', 'noble', 'orbit', 'prime', 'quilt', 'rapid', 'shark', 'tulip', 'upset', 'voter', 'waste', 'xerox', 'yield', 'zonal', 'adore', 'blaze', 'crane', 'devil', 'eager', 'faint', 'gloom', 'habit', 'inner', 'joker', 'knead', 'light', 'mirth', 'niche', 'olive', 'piano', 'quiet', 'roast', 'silly', 'trump', 'unify', 'vivid', 'whirl', 'xenon', 'yummy', 'zippy', 'bravo', 'chant', 'drown', 'exile', 'fable', 'glint', 'harsh', 'ideal', 'jazzy', 'kneel', 'laugh', 'meant', 'nifty', 'other', 'plumb', 'quote', 'risky', 'shard', 'title', 'uncut', 'valor', 'waltz', 'xenon', 'yeast', 'zesty', 'bloom', 'crash', 'dealt', 'exert', 'flock', 'grant', 'hound', 'imply', 'jumpy', 'knelt', 'lower', 'march', 'never', 'onset', 'party', 'quill', 'rough', 'scarf', 'track', 'utter', 'verse', 'woven', 'xerox', 'young', 'zebra', 'bluff', 'craze', 'doubt', 'elect', 'frost', 'ghost', 'hatch', 'inlet', 'joust', 'kinky', 'leapt', 'minor', 'north', 'outgo', 'plead', 'quint', 'river', 'stint', 'tramp', 'usurp', 'vinyl', 'whiny', 'xenon', 'yummy', 'zesty'];\nconst getRandomWord = () => {\n  return VALID_WORDS[Math.floor(Math.random() * VALID_WORDS.length)];\n};\nexport const generateWordSet = async () => {\n  const wordSet = new Set(VALID_WORDS);\n  const todaysWord = getRandomWord();\n  return {\n    wordSet,\n    todaysWord\n  };\n};\nexport const evaluateGuess = (guess, correctWord) => {\n  const result = Array(WORD_LENGTH).fill('absent');\n  const correctWordArray = correctWord.split('');\n  const guessArray = guess.split('');\n\n  // First pass: check for correct letters in the correct position\n  guessArray.forEach((letter, index) => {\n    if (correctWordArray[index] === letter) {\n      result[index] = 'correct';\n      correctWordArray[index] = null; // Mark this letter as used\n    }\n  });\n\n  // Second pass: check for correct letters in the wrong position\n  guessArray.forEach((letter, index) => {\n    if (result[index] !== 'correct' && correctWordArray.includes(letter)) {\n      result[index] = 'present';\n      correctWordArray[correctWordArray.indexOf(letter)] = null; // Mark this letter as used\n    }\n  });\n  return result;\n};","map":{"version":3,"names":["WORD_LENGTH","VALID_WORDS","getRandomWord","Math","floor","random","length","generateWordSet","wordSet","Set","todaysWord","evaluateGuess","guess","correctWord","result","Array","fill","correctWordArray","split","guessArray","forEach","letter","index","includes","indexOf"],"sources":["/home/chirag/Documents/GitHub/wordle/src/gameLogic.js"],"sourcesContent":["// src/gameLogic.js\n\nconst WORD_LENGTH = 5;\nconst VALID_WORDS = [\n  'apple', 'berry', 'cherry', 'delta', 'eagle', 'flute', 'grape', 'house', 'index', 'joker',\n  'abide', 'baker', 'cable', 'dance', 'earth', 'flint', 'giant', 'heart', 'ivory', 'jolly',\n  'knock', 'lemon', 'melon', 'night', 'opera', 'plant', 'query', 'raven', 'stone', 'tiger',\n  'ultra', 'vivid', 'whale', 'xenon', 'yacht', 'zebra', 'badge', 'cloak', 'drift', 'eject',\n  'forge', 'glide', 'hound', 'inbox', 'joint', 'kneel', 'lodge', 'music', 'noble', 'orbit',\n  'prime', 'quilt', 'rapid', 'shark', 'tulip', 'upset', 'voter', 'waste', 'xerox', 'yield',\n  'zonal', 'adore', 'blaze', 'crane', 'devil', 'eager', 'faint', 'gloom', 'habit', 'inner',\n  'joker', 'knead', 'light', 'mirth', 'niche', 'olive', 'piano', 'quiet', 'roast', 'silly',\n  'trump', 'unify', 'vivid', 'whirl', 'xenon', 'yummy', 'zippy', 'bravo', 'chant', 'drown',\n  'exile', 'fable', 'glint', 'harsh', 'ideal', 'jazzy', 'kneel', 'laugh', 'meant', 'nifty',\n  'other', 'plumb', 'quote', 'risky', 'shard', 'title', 'uncut', 'valor', 'waltz', 'xenon',\n  'yeast', 'zesty', 'bloom', 'crash', 'dealt', 'exert', 'flock', 'grant', 'hound', 'imply',\n  'jumpy', 'knelt', 'lower', 'march', 'never', 'onset', 'party', 'quill', 'rough', 'scarf',\n  'track', 'utter', 'verse', 'woven', 'xerox', 'young', 'zebra', 'bluff', 'craze', 'doubt',\n  'elect', 'frost', 'ghost', 'hatch', 'inlet', 'joust', 'kinky', 'leapt', 'minor', 'north',\n  'outgo', 'plead', 'quint', 'river', 'stint', 'tramp', 'usurp', 'vinyl', 'whiny', 'xenon',\n  'yummy', 'zesty'\n];\n\nconst getRandomWord = () => {\n  return VALID_WORDS[Math.floor(Math.random() * VALID_WORDS.length)];\n};\n\nexport const generateWordSet = async () => {\n  const wordSet = new Set(VALID_WORDS);\n  const todaysWord = getRandomWord();\n  return { wordSet, todaysWord };\n};\n\nexport const evaluateGuess = (guess, correctWord) => {\n  const result = Array(WORD_LENGTH).fill('absent');\n\n  const correctWordArray = correctWord.split('');\n  const guessArray = guess.split('');\n\n  // First pass: check for correct letters in the correct position\n  guessArray.forEach((letter, index) => {\n    if (correctWordArray[index] === letter) {\n      result[index] = 'correct';\n      correctWordArray[index] = null; // Mark this letter as used\n    }\n  });\n\n  // Second pass: check for correct letters in the wrong position\n  guessArray.forEach((letter, index) => {\n    if (result[index] !== 'correct' && correctWordArray.includes(letter)) {\n      result[index] = 'present';\n      correctWordArray[correctWordArray.indexOf(letter)] = null; // Mark this letter as used\n    }\n  });\n\n  return result;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}