{"ast":null,"code":"var _jsxFileName = \"/home/chirag/Documents/GitHub/wordle/src/Wordle.jsx\",\n  _s = $RefreshSig$();\n// Wordle.jsx\n\nimport React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet, evaluateGuess } from './gameLogic';\nimport './Wordle.css';\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst keyboardColors = ['#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'];\nconst Wordle = () => {\n  _s();\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [isSoundOn, setIsSoundOn] = useState(false);\n  const audioContextRef = useRef(null);\n  const gameplaySourceRef = useRef(null);\n  const gameoverSourceRef = useRef(null);\n  const gamewinSourceRef = useRef(null);\n  useEffect(() => {\n    const initAudio = async () => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      const [gameplayBuffer, gameoverBuffer, gamewinBuffer] = await Promise.all([fetch(gameplaySound).then(res => res.arrayBuffer()), fetch(gameoverSound).then(res => res.arrayBuffer()), fetch(gamewinSound).then(res => res.arrayBuffer())]);\n      gameplaySourceRef.current = await createBufferSource(gameplayBuffer);\n      gameoverSourceRef.current = await createBufferSource(gameoverBuffer);\n      gamewinSourceRef.current = await createBufferSource(gamewinBuffer);\n    };\n    initAudio();\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n  const createBufferSource = async arrayBuffer => {\n    const source = audioContextRef.current.createBufferSource();\n    source.buffer = await audioContextRef.current.decodeAudioData(arrayBuffer);\n    source.connect(audioContextRef.current.destination);\n    return source;\n  };\n  useEffect(() => {\n    if (isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.loop = true;\n      gameplaySourceRef.current.start();\n    } else if (!isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.stop();\n      gameplaySourceRef.current = null;\n    }\n  }, [isSoundOn]);\n  useEffect(() => {\n    const fetchWord = async () => {\n      setLoading(true);\n      const {\n        wordSet,\n        todaysWord\n      } = await generateWordSet();\n      setWordSet(wordSet);\n      setCorrectWord(todaysWord);\n      setLoading(false);\n    };\n    fetchWord();\n  }, []);\n  const handleKeyPress = useCallback(key => {\n    if (gameOver || loading) return;\n    if (key === 'ENTER' || key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n      if (!wordSet.has(currentGuess.toUpperCase())) {\n        alert('Not in word list');\n        return;\n      }\n      const newGuesses = [...guesses];\n      newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess.toUpperCase();\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n      if (currentGuess.toUpperCase() === correctWord) {\n        setGameOver(true);\n        triggerConfetti();\n        playGamewinSound();\n        alert('You won!');\n      } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n        setGameOver(true);\n        playGameoverSound();\n        alert(`Game over! The word was ${correctWord}`);\n      } else {\n        playGameplaySound();\n      }\n    } else if (key === 'BACK' || key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n      setCurrentGuess(prev => prev + key.toUpperCase());\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      handleKeyPress(event.key);\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]);\n  const keyboardLayout = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']];\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, []);\n  const triggerConfetti = () => {\n    const end = Date.now() + 3.5 * 1000;\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n    const frame = () => {\n      if (Date.now() > end) return;\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 0,\n          y: 0.5\n        },\n        colors: colors\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 1,\n          y: 0.5\n        },\n        colors: colors\n      });\n      requestAnimationFrame(frame);\n    };\n    frame();\n  };\n  const playGameplaySound = () => {\n    if (isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.start();\n    }\n  };\n  const playGameoverSound = () => {\n    if (isSoundOn && gameoverSourceRef.current) {\n      gameoverSourceRef.current.start();\n    }\n  };\n  const playGamewinSound = () => {\n    if (isSoundOn && gamewinSourceRef.current) {\n      gamewinSourceRef.current.start();\n    }\n  };\n  const toggleSound = () => {\n    setIsSoundOn(!isSoundOn);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sound-toggle\",\n      onClick: toggleSound,\n      children: isSoundOn ? 'ðŸ”Š' : 'ðŸ”‡'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: Array.from({\n          length: WORD_LENGTH\n        }).map((_, j) => /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"cell\",\n          initial: {\n            scale: 1\n          },\n          animate: {\n            scale: [1, 1.1, 1],\n            rotate: [0, 10, -10, 0],\n            backgroundColor: guess ? evaluateGuess(guess, correctWord)[j] === 'correct' ? '#6aaa64' : evaluateGuess(guess, correctWord)[j] === 'present' ? '#c9b458' : '#3a3a3c' : 'transparent',\n            color: guess ? '#fff' : '#fff'\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: guess[j] || ''\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }, this))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: Array.from({\n          length: WORD_LENGTH\n        }).map((_, i) => /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"cell\",\n          initial: {\n            scale: 1\n          },\n          animate: {\n            scale: currentGuess[i] ? [1, 1.1, 1] : 1\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: currentGuess[i] || ''\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: keyboardLayout.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard-row\",\n        children: row.map(key => /*#__PURE__*/_jsxDEV(motion.button, {\n          className: \"key\",\n          \"data-key\": key,\n          \"data-special-key\": key === \"ENTER\" || key === \"BACK\" ? \"true\" : \"false\",\n          style: {\n            backgroundColor: keyColors[key]\n          },\n          whileHover: {\n            scale: 1.1\n          },\n          whileTap: {\n            scale: 0.9\n          },\n          onClick: () => handleKeyPress(key),\n          children: key === \"ENTER\" ? \"Enter\" : key === \"BACK\" ? \"âŒ«\" : key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(Wordle, \"WF6tL/uef326aXno0awTWM7oaFM=\");\n_c = Wordle;\nexport default Wordle;\nvar _c;\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","useRef","motion","confetti","generateWordSet","evaluateGuess","gameplaySound","gameoverSound","gamewinSound","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_GUESSES","keyboardColors","Wordle","_s","wordSet","setWordSet","Set","correctWord","setCorrectWord","guesses","setGuesses","Array","fill","currentGuess","setCurrentGuess","gameOver","setGameOver","loading","setLoading","isSoundOn","setIsSoundOn","audioContextRef","gameplaySourceRef","gameoverSourceRef","gamewinSourceRef","initAudio","current","window","AudioContext","webkitAudioContext","gameplayBuffer","gameoverBuffer","gamewinBuffer","Promise","all","fetch","then","res","arrayBuffer","createBufferSource","close","source","buffer","decodeAudioData","connect","destination","loop","start","stop","fetchWord","todaysWord","handleKeyPress","key","length","has","toUpperCase","alert","newGuesses","findIndex","guess","triggerConfetti","playGamewinSound","playGameoverSound","playGameplaySound","prev","slice","match","handleKeyDown","event","addEventListener","removeEventListener","keyboardLayout","keyColors","colors","flat","forEach","index","end","Date","now","frame","particleCount","angle","spread","startVelocity","origin","x","y","requestAnimationFrame","toggleSound","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","i","from","_","j","div","initial","scale","animate","rotate","backgroundColor","color","transition","duration","row","button","style","whileHover","whileTap","_c","$RefreshReg$"],"sources":["/home/chirag/Documents/GitHub/wordle/src/Wordle.jsx"],"sourcesContent":["// Wordle.jsx\n\nimport React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet, evaluateGuess } from './gameLogic';\nimport './Wordle.css';\n\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nconst keyboardColors = [\n  '#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', \n  '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'\n];\n\nconst Wordle = () => {\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [isSoundOn, setIsSoundOn] = useState(false);\n  const audioContextRef = useRef(null);\n  const gameplaySourceRef = useRef(null);\n  const gameoverSourceRef = useRef(null);\n  const gamewinSourceRef = useRef(null);\n\n  useEffect(() => {\n    const initAudio = async () => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      const [gameplayBuffer, gameoverBuffer, gamewinBuffer] = await Promise.all([\n        fetch(gameplaySound).then(res => res.arrayBuffer()),\n        fetch(gameoverSound).then(res => res.arrayBuffer()),\n        fetch(gamewinSound).then(res => res.arrayBuffer())\n      ]);\n\n      gameplaySourceRef.current = await createBufferSource(gameplayBuffer);\n      gameoverSourceRef.current = await createBufferSource(gameoverBuffer);\n      gamewinSourceRef.current = await createBufferSource(gamewinBuffer);\n    };\n\n    initAudio();\n\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  const createBufferSource = async (arrayBuffer) => {\n    const source = audioContextRef.current.createBufferSource();\n    source.buffer = await audioContextRef.current.decodeAudioData(arrayBuffer);\n    source.connect(audioContextRef.current.destination);\n    return source;\n  };\n\n  useEffect(() => {\n    if (isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.loop = true;\n      gameplaySourceRef.current.start();\n    } else if (!isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.stop();\n      gameplaySourceRef.current = null;\n    }\n  }, [isSoundOn]);\n\n  useEffect(() => {\n    const fetchWord = async () => {\n      setLoading(true);\n      const { wordSet, todaysWord } = await generateWordSet();\n      setWordSet(wordSet);\n      setCorrectWord(todaysWord);\n      setLoading(false);\n    };\n\n    fetchWord();\n  }, []);\n\n  const handleKeyPress = useCallback((key) => {\n    if (gameOver || loading) return;\n\n    if (key === 'ENTER' || key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n      if (!wordSet.has(currentGuess.toUpperCase())) {\n        alert('Not in word list');\n        return;\n      }\n\n      const newGuesses = [...guesses];\n      newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess.toUpperCase();\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n\n      if (currentGuess.toUpperCase() === correctWord) {\n        setGameOver(true);\n        triggerConfetti();\n        playGamewinSound();\n        alert('You won!');\n      } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n        setGameOver(true);\n        playGameoverSound();\n        alert(`Game over! The word was ${correctWord}`);\n      } else {\n        playGameplaySound();\n      }\n    } else if (key === 'BACK' || key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n      setCurrentGuess(prev => prev + key.toUpperCase());\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      handleKeyPress(event.key);\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]);\n\n  const keyboardLayout = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']\n  ];\n\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, []);\n\n  const triggerConfetti = () => {\n    const end = Date.now() + 3.5 * 1000;\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n\n    const frame = () => {\n      if (Date.now() > end) return;\n\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 0, y: 0.5 },\n        colors: colors,\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 1, y: 0.5 },\n        colors: colors,\n      });\n\n      requestAnimationFrame(frame);\n    };\n\n    frame();\n  };\n\n  const playGameplaySound = () => {\n    if (isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.start();\n    }\n  };\n\n  const playGameoverSound = () => {\n    if (isSoundOn && gameoverSourceRef.current) {\n      gameoverSourceRef.current.start();\n    }\n  };\n\n  const playGamewinSound = () => {\n    if (isSoundOn && gamewinSourceRef.current) {\n      gamewinSourceRef.current.start();\n    }\n  };\n\n  const toggleSound = () => {\n    setIsSoundOn(!isSoundOn);\n  };\n\n  if (loading) {\n    return <div className=\"container\"><h1 className=\"title\">Loading...</h1></div>;\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Wordle Clone</h1>\n      <button className=\"sound-toggle\" onClick={toggleSound}>\n        {isSoundOn ? 'ðŸ”Š' : 'ðŸ”‡'}\n      </button>\n      <div className=\"grid\">\n        {guesses.map((guess, i) => (\n          <div className=\"row\" key={i}>\n            {Array.from({ length: WORD_LENGTH }).map((_, j) => (\n              <motion.div\n                className=\"cell\"\n                key={j}\n                initial={{ scale: 1 }}\n                animate={{\n                  scale: [1, 1.1, 1],\n                  rotate: [0, 10, -10, 0],\n                  backgroundColor: guess\n                    ? evaluateGuess(guess, correctWord)[j] === 'correct'\n                      ? '#6aaa64'\n                      : evaluateGuess(guess, correctWord)[j] === 'present'\n                      ? '#c9b458'\n                      : '#3a3a3c'\n                    : 'transparent',\n                  color: guess ? '#fff' : '#fff',\n                }}\n                transition={{ duration: 0.3 }}\n              >\n                {guess[j] || ''}\n              </motion.div>\n            ))}\n          </div>\n        ))}\n        <div className=\"row\">\n          {Array.from({ length: WORD_LENGTH }).map((_, i) => (\n            <motion.div\n              className=\"cell\"\n              key={i}\n              initial={{ scale: 1 }}\n              animate={{ scale: currentGuess[i] ? [1, 1.1, 1] : 1 }}\n              transition={{ duration: 0.3 }}\n            >\n              {currentGuess[i] || ''}\n            </motion.div>\n          ))}\n        </div>\n      </div>\n      <div className=\"keyboard\">\n        {keyboardLayout.map((row, i) => (\n          <div className=\"keyboard-row\" key={i}>\n            {row.map((key) => (\n              <motion.button\n                className=\"key\"\n                key={key}\n                data-key={key}\n                data-special-key={key === \"ENTER\" || key === \"BACK\" ? \"true\" : \"false\"}\n                style={{ backgroundColor: keyColors[key] }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={() => handleKeyPress(key)}\n              >\n                {key === \"ENTER\" ? \"Enter\" : key === \"BACK\" ? \"âŒ«\" : key}\n              </motion.button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Wordle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}