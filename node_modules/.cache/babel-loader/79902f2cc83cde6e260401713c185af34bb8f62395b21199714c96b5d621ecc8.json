{"ast":null,"code":"// gameLogic.jsx\n\nconst WORD_LIST = ['APPLE', 'BANANA', 'CHERRY', 'DATES', 'EGGPLANT', 'FIG', 'GRAPE', 'HONEYDEW', 'JACKFRUIT', 'KIWI', 'LEMON', 'MANGO', 'NECTARINE', 'ORANGE', 'PAPAYA', 'QUINCE', 'RASPBERRY', 'STRAWBERRY', 'TOMATO', 'UGLI'];\nexport const generateWordSet = async () => {\n  const today = new Date();\n  const wordSet = new Set();\n\n  // Select a random word from WORD_LIST\n  const index = today.getDate() % WORD_LIST.length;\n  const todaysWord = WORD_LIST[index];\n\n  // Generate a set of all characters in the selected word\n  for (let char of todaysWord) {\n    wordSet.add(char);\n  }\n  return {\n    wordSet,\n    todaysWord\n  };\n};\nexport const evaluateGuess = (guess, correctWord) => {\n  const result = [];\n  const guessedSet = new Set(guess);\n  const correctSet = new Set(correctWord);\n  for (let i = 0; i < correctWord.length; i++) {\n    if (guess[i] === correctWord[i]) {\n      result.push('correct');\n    } else if (guessedSet.has(correctWord[i])) {\n      result.push('present');\n    } else {\n      result.push('absent');\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["WORD_LIST","generateWordSet","today","Date","wordSet","Set","index","getDate","length","todaysWord","char","add","evaluateGuess","guess","correctWord","result","guessedSet","correctSet","i","push","has"],"sources":["/home/chirag/Documents/GitHub/wordle/src/gameLogic.js"],"sourcesContent":["// gameLogic.jsx\n\nconst WORD_LIST = [\n  'APPLE', 'BANANA', 'CHERRY', 'DATES', 'EGGPLANT',\n  'FIG', 'GRAPE', 'HONEYDEW', 'JACKFRUIT', 'KIWI',\n  'LEMON', 'MANGO', 'NECTARINE', 'ORANGE', 'PAPAYA',\n  'QUINCE', 'RASPBERRY', 'STRAWBERRY', 'TOMATO', 'UGLI'\n];\n\nexport const generateWordSet = async () => {\n  const today = new Date();\n  const wordSet = new Set();\n\n  // Select a random word from WORD_LIST\n  const index = today.getDate() % WORD_LIST.length;\n  const todaysWord = WORD_LIST[index];\n\n  // Generate a set of all characters in the selected word\n  for (let char of todaysWord) {\n    wordSet.add(char);\n  }\n\n  return { wordSet, todaysWord };\n};\n\nexport const evaluateGuess = (guess, correctWord) => {\n  const result = [];\n  const guessedSet = new Set(guess);\n  const correctSet = new Set(correctWord);\n\n  for (let i = 0; i < correctWord.length; i++) {\n    if (guess[i] === correctWord[i]) {\n      result.push('correct');\n    } else if (guessedSet.has(correctWord[i])) {\n      result.push('present');\n    } else {\n      result.push('absent');\n    }\n  }\n\n  return result;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAG,CAChB,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAChD,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,EAC/C,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EACjD,QAAQ,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,CACtD;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAEzB;EACA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,OAAO,CAAC,CAAC,GAAGP,SAAS,CAACQ,MAAM;EAChD,MAAMC,UAAU,GAAGT,SAAS,CAACM,KAAK,CAAC;;EAEnC;EACA,KAAK,IAAII,IAAI,IAAID,UAAU,EAAE;IAC3BL,OAAO,CAACO,GAAG,CAACD,IAAI,CAAC;EACnB;EAEA,OAAO;IAAEN,OAAO;IAAEK;EAAW,CAAC;AAChC,CAAC;AAED,OAAO,MAAMG,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EACnD,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,UAAU,GAAG,IAAIX,GAAG,CAACQ,KAAK,CAAC;EACjC,MAAMI,UAAU,GAAG,IAAIZ,GAAG,CAACS,WAAW,CAAC;EAEvC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACN,MAAM,EAAEU,CAAC,EAAE,EAAE;IAC3C,IAAIL,KAAK,CAACK,CAAC,CAAC,KAAKJ,WAAW,CAACI,CAAC,CAAC,EAAE;MAC/BH,MAAM,CAACI,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC,MAAM,IAAIH,UAAU,CAACI,GAAG,CAACN,WAAW,CAACI,CAAC,CAAC,CAAC,EAAE;MACzCH,MAAM,CAACI,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC,MAAM;MACLJ,MAAM,CAACI,IAAI,CAAC,QAAQ,CAAC;IACvB;EACF;EAEA,OAAOJ,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}