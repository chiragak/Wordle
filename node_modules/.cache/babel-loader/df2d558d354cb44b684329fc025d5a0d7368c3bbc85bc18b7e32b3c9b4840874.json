{"ast":null,"code":"// gameLogic.jsx\n\n// Function to generate a random word set and select today's word\nexport const generateWordSet = async () => {\n  // Simulating fetching word set from an API or database\n  const wordSet = new Set(['APPLE', 'BANANA', 'ORANGE', 'MANGO', 'GRAPE', 'KIWI', 'PEAR']);\n\n  // Selecting a random word from the word set\n  const wordArray = Array.from(wordSet);\n  const todaysWord = wordArray[Math.floor(Math.random() * wordArray.length)];\n  return {\n    wordSet,\n    todaysWord\n  };\n};\n\n// Function to evaluate a guess against the correct word\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArray = guess.split('');\n  const correctWordArray = correctWord.split('');\n  const result = guessArray.map((letter, index) => {\n    if (letter === correctWordArray[index]) {\n      return 'correct'; // Letter is in correct position\n    } else if (correctWordArray.includes(letter)) {\n      return 'present'; // Letter is present but in wrong position\n    } else {\n      return 'incorrect'; // Letter is not in the correct word\n    }\n  });\n  return result;\n};","map":{"version":3,"names":["generateWordSet","wordSet","Set","wordArray","Array","from","todaysWord","Math","floor","random","length","evaluateGuess","guess","correctWord","guessArray","split","correctWordArray","result","map","letter","index","includes"],"sources":["/home/chirag/Documents/GitHub/wordle/src/gameLogic.js"],"sourcesContent":["// gameLogic.jsx\n\n// Function to generate a random word set and select today's word\nexport const generateWordSet = async () => {\n  // Simulating fetching word set from an API or database\n  const wordSet = new Set(['APPLE', 'BANANA', 'ORANGE', 'MANGO', 'GRAPE', 'KIWI', 'PEAR']);\n  \n  // Selecting a random word from the word set\n  const wordArray = Array.from(wordSet);\n  const todaysWord = wordArray[Math.floor(Math.random() * wordArray.length)];\n  \n  return { wordSet, todaysWord };\n};\n\n// Function to evaluate a guess against the correct word\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArray = guess.split('');\n  const correctWordArray = correctWord.split('');\n  \n  const result = guessArray.map((letter, index) => {\n    if (letter === correctWordArray[index]) {\n      return 'correct'; // Letter is in correct position\n    } else if (correctWordArray.includes(letter)) {\n      return 'present'; // Letter is present but in wrong position\n    } else {\n      return 'incorrect'; // Letter is not in the correct word\n    }\n  });\n  \n  return result;\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC;EACA,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;;EAExF;EACA,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACJ,OAAO,CAAC;EACrC,MAAMK,UAAU,GAAGH,SAAS,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,SAAS,CAACO,MAAM,CAAC,CAAC;EAE1E,OAAO;IAAET,OAAO;IAAEK;EAAW,CAAC;AAChC,CAAC;;AAED;AACA,OAAO,MAAMK,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EACnD,MAAMC,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,EAAE,CAAC;EAClC,MAAMC,gBAAgB,GAAGH,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;EAE9C,MAAME,MAAM,GAAGH,UAAU,CAACI,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IAC/C,IAAID,MAAM,KAAKH,gBAAgB,CAACI,KAAK,CAAC,EAAE;MACtC,OAAO,SAAS,CAAC,CAAC;IACpB,CAAC,MAAM,IAAIJ,gBAAgB,CAACK,QAAQ,CAACF,MAAM,CAAC,EAAE;MAC5C,OAAO,SAAS,CAAC,CAAC;IACpB,CAAC,MAAM;MACL,OAAO,WAAW,CAAC,CAAC;IACtB;EACF,CAAC,CAAC;EAEF,OAAOF,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}