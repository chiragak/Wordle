{"ast":null,"code":"var _jsxFileName = \"/home/chirag/Documents/GitHub/Wordle/src/Wordle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet, evaluateGuess } from './gameLogic';\nimport './Wordle.css';\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst keyboardColors = ['#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'];\nconst Instructions = ({\n  onClose\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"instructions-modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"How to Not Lose at Wordle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"You've got 6 tries to guess a 5-letter word. No pressure!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Each guess must be a valid word. Sorry, \\\"QWERT\\\" fans.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"After each guess, the color-coded feedback will be your new best friend:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-examples\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"example correct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Green: You nailed it! This letter is in the right spot. Do a little dance!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"example present\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Yellow: Close, but no cigar. Right letter, wrong spot. It's like finding your keys in the fridge.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"example absent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Gray: Nope, not even close. This letter is taking a vacation from your word.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Stuck? Use the hint button! But choose wisely, you only get 2 per game. Use them like your last two brain cells.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close-instructions\",\n      onClick: onClose,\n      children: \"Let's Wordle!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = Instructions;\nconst Wordle = () => {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [showInstructions, setShowInstructions] = useState(true);\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [gameKey, setGameKey] = useState(0);\n  const [hintsRemaining, setHintsRemaining] = useState(2);\n  const [hintMessage, setHintMessage] = useState('');\n  const [isSoundOn, setIsSoundOn] = useState(false);\n  const audioContextRef = useRef(null);\n  const audioBuffersRef = useRef({});\n  const gameplaySourceRef = useRef(null);\n  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes in seconds\n  const [timerActive, setTimerActive] = useState(false);\n  useEffect(() => {\n    const initAudio = async () => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      const [gameplayBuffer, gameoverBuffer, gamewinBuffer] = await Promise.all([fetch(gameplaySound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)), fetch(gameoverSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)), fetch(gamewinSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer))]);\n      audioBuffersRef.current = {\n        gameplay: gameplayBuffer,\n        gameover: gameoverBuffer,\n        gamewin: gamewinBuffer\n      };\n    };\n    initAudio();\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n  const playSound = (soundName, loop = false) => {\n    if (audioContextRef.current && audioBuffersRef.current[soundName]) {\n      const source = audioContextRef.current.createBufferSource();\n      source.buffer = audioBuffersRef.current[soundName];\n      source.connect(audioContextRef.current.destination);\n      source.loop = loop;\n      source.start();\n      return source;\n    }\n    return null;\n  };\n  useEffect(() => {\n    if (isSoundOn && !gameplaySourceRef.current) {\n      gameplaySourceRef.current = playSound('gameplay', true);\n    } else if (!isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.stop();\n      gameplaySourceRef.current = null;\n    }\n  }, [isSoundOn]);\n  useEffect(() => {\n    fetchWord();\n  }, []);\n  useEffect(() => {\n    let timer;\n    if (timerActive && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      setGameOver(true);\n      if (gameplaySourceRef.current) {\n        gameplaySourceRef.current.stop();\n        gameplaySourceRef.current = null;\n      }\n      playSound('gameover');\n      alert(`Time's up! The word was ${correctWord}`);\n    }\n    return () => clearInterval(timer);\n  }, [timerActive, timeLeft, correctWord]);\n  const fetchWord = async () => {\n    setLoading(true);\n    const {\n      wordSet,\n      todaysWord\n    } = await generateWordSet();\n    setWordSet(wordSet);\n    setCorrectWord(todaysWord);\n    setLoading(false);\n  };\n  const startGame = () => {\n    setGameStarted(true);\n    setShowInstructions(false);\n    fetchWord();\n    setTimerActive(true);\n  };\n  const handleKeyPress = useCallback(key => {\n    if (gameOver || loading) return;\n    if (key === 'ENTER' || key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n      if (!wordSet.has(currentGuess.toUpperCase())) {\n        alert('Not in word list');\n        return;\n      }\n      const newGuesses = [...guesses];\n      newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess.toUpperCase();\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n      if (currentGuess.toUpperCase() === correctWord) {\n        setGameOver(true);\n        setTimerActive(false);\n        triggerConfetti();\n        if (gameplaySourceRef.current) {\n          gameplaySourceRef.current.stop();\n          gameplaySourceRef.current = null;\n        }\n        playSound('gamewin');\n        alert('You won!');\n      } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n        setGameOver(true);\n        setTimerActive(false);\n        if (gameplaySourceRef.current) {\n          gameplaySourceRef.current.stop();\n          gameplaySourceRef.current = null;\n        }\n        playSound('gameover');\n        alert(`Game over! The word was ${correctWord}`);\n      }\n    } else if (key === 'BACK' || key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n      setCurrentGuess(prev => prev + key.toUpperCase());\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      handleKeyPress(event.key);\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]);\n  const keyboardLayout = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']];\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, []);\n  const triggerConfetti = () => {\n    const end = Date.now() + 3.5 * 1000;\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n    const frame = () => {\n      if (Date.now() > end) return;\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 0,\n          y: 0.5\n        },\n        colors: colors\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 1,\n          y: 0.5\n        },\n        colors: colors\n      });\n      requestAnimationFrame(frame);\n    };\n    frame();\n  };\n  const toggleSound = () => {\n    setIsSoundOn(!isSoundOn);\n  };\n  const getHint = () => {\n    if (hintsRemaining > 0 && !gameOver) {\n      let hintIndex;\n      do {\n        hintIndex = Math.floor(Math.random() * WORD_LENGTH);\n      } while (currentGuess[hintIndex] === correctWord[hintIndex]);\n      const positions = ['1st', '2nd', '3rd', '4th', '5th'];\n      const hintText = `The ${positions[hintIndex]} letter is ${correctWord[hintIndex]}`;\n      setHintMessage(hintText);\n      setHintsRemaining(prev => prev - 1);\n    }\n  };\n  const resetGame = () => {\n    setGameKey(prev => prev + 1);\n    setGuesses(Array(MAX_GUESSES).fill(''));\n    setCurrentGuess('');\n    setGameOver(false);\n    setHintsRemaining(2);\n    setHintMessage('');\n    setTimeLeft(300); // Reset to 5 minutes\n    setTimerActive(true);\n    fetchWord();\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 12\n    }, this);\n  }\n  if (!gameStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Wordle Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), showInstructions ? /*#__PURE__*/_jsxDEV(Instructions, {\n        onClose: () => setShowInstructions(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-game-button\",\n        onClick: startGame,\n        children: \"Start Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sound-toggle\",\n        onClick: toggleSound,\n        children: isSoundOn ? '🔊' : '🔇'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hint-button\",\n        onClick: getHint,\n        disabled: hintsRemaining === 0 || gameOver,\n        children: [\"\\uD83D\\uDCA1 Hint (\", hintsRemaining, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"retry-button\",\n        onClick: resetGame,\n        children: \"\\uD83D\\uDD04 Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), hintMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hint-message\",\n      children: hintMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row current-guess\",\n        children: Array.from({\n          length: WORD_LENGTH\n        }).map((_, j) => /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"cell\",\n          initial: {\n            scale: 1\n          },\n          animate: {\n            scale: [1, 1.1, 1],\n            rotate: [0, 10, -10, 0],\n            backgroundColor: guess ? evaluateGuess(guess, correctWord)[j] === 'correct' ? '#6aaa64' : evaluateGuess(guess, correctWord)[j] === 'present' ? '#c9b458' : '#3a3a3c' : 'transparent',\n            color: guess ? '#fff' : '#fff'\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: guess[j] || ''\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 15\n        }, this))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: Array.from({\n          length: WORD_LENGTH\n        }).map((_, i) => /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"cell\",\n          initial: {\n            scale: 1\n          },\n          animate: {\n            scale: currentGuess[i] ? [1, 1.1, 1] : 1\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: currentGuess[i] || ''\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: keyboardLayout.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard-row\",\n        children: row.map(key => /*#__PURE__*/_jsxDEV(motion.button, {\n          className: \"key\",\n          \"data-key\": key,\n          \"data-special-key\": key === \"ENTER\" || key === \"BACK\" ? \"true\" : \"false\",\n          style: {\n            backgroundColor: keyColors[key]\n          },\n          whileHover: {\n            scale: 1.1\n          },\n          whileTap: {\n            scale: 0.9\n          },\n          onClick: () => handleKeyPress(key),\n          children: key === \"ENTER\" ? \"Enter\" : key === \"BACK\" ? \"⌫\" : key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 15\n        }, this))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)]\n  }, gameKey, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\n_s(Wordle, \"3xLQg3nZSWkGqAr9wBHmXGrEN5Q=\");\n_c2 = Wordle;\nexport default Wordle;\nvar _c, _c2;\n$RefreshReg$(_c, \"Instructions\");\n$RefreshReg$(_c2, \"Wordle\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","useRef","motion","confetti","generateWordSet","evaluateGuess","gameplaySound","gameoverSound","gamewinSound","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_GUESSES","keyboardColors","Instructions","onClose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Wordle","_s","gameStarted","setGameStarted","showInstructions","setShowInstructions","wordSet","setWordSet","Set","correctWord","setCorrectWord","guesses","setGuesses","Array","fill","currentGuess","setCurrentGuess","gameOver","setGameOver","loading","setLoading","gameKey","setGameKey","hintsRemaining","setHintsRemaining","hintMessage","setHintMessage","isSoundOn","setIsSoundOn","audioContextRef","audioBuffersRef","gameplaySourceRef","timeLeft","setTimeLeft","timerActive","setTimerActive","initAudio","current","window","AudioContext","webkitAudioContext","gameplayBuffer","gameoverBuffer","gamewinBuffer","Promise","all","fetch","then","res","arrayBuffer","decodeAudioData","gameplay","gameover","gamewin","close","playSound","soundName","loop","source","createBufferSource","buffer","connect","destination","start","stop","fetchWord","timer","setInterval","prevTime","alert","clearInterval","todaysWord","startGame","handleKeyPress","key","length","has","toUpperCase","newGuesses","findIndex","guess","triggerConfetti","prev","slice","match","handleKeyDown","event","addEventListener","removeEventListener","keyboardLayout","keyColors","colors","flat","forEach","index","end","Date","now","frame","particleCount","angle","spread","startVelocity","origin","x","y","requestAnimationFrame","toggleSound","getHint","hintIndex","Math","floor","random","positions","hintText","resetGame","formatTime","seconds","minutes","remainingSeconds","disabled","map","i","from","_","j","div","initial","scale","animate","rotate","backgroundColor","color","transition","duration","row","button","style","whileHover","whileTap","_c2","$RefreshReg$"],"sources":["/home/chirag/Documents/GitHub/Wordle/src/Wordle.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet, evaluateGuess } from './gameLogic';\nimport './Wordle.css';\n\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nconst keyboardColors = [\n  '#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', \n  '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'\n];\n\nconst Instructions = ({ onClose }) => {\n  return (\n    <div className=\"instructions-modal\">\n      <h2>How to Not Lose at Wordle</h2>\n      <ul>\n        <li>You've got 6 tries to guess a 5-letter word. No pressure!</li>\n        <li>Each guess must be a valid word. Sorry, \"QWERT\" fans.</li>\n        <li>After each guess, the color-coded feedback will be your new best friend:</li>\n      </ul>\n      <div className=\"color-examples\">\n        <div className=\"example-row\">\n          <span className=\"example correct\"></span>\n          <p>Green: You nailed it! This letter is in the right spot. Do a little dance!</p>\n        </div>\n        <div className=\"example-row\">\n          <span className=\"example present\"></span>\n          <p>Yellow: Close, but no cigar. Right letter, wrong spot. It's like finding your keys in the fridge.</p>\n        </div>\n        <div className=\"example-row\">\n          <span className=\"example absent\"></span>\n          <p>Gray: Nope, not even close. This letter is taking a vacation from your word.</p>\n        </div>\n      </div>\n      <p>Stuck? Use the hint button! But choose wisely, you only get 2 per game. Use them like your last two brain cells.</p>\n      <button className=\"close-instructions\" onClick={onClose}>Let's Wordle!</button>\n    </div>\n  );\n};\n\nconst Wordle = () => {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [showInstructions, setShowInstructions] = useState(true);\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [gameKey, setGameKey] = useState(0);\n  const [hintsRemaining, setHintsRemaining] = useState(2);\n  const [hintMessage, setHintMessage] = useState('');\n  const [isSoundOn, setIsSoundOn] = useState(false);\n  const audioContextRef = useRef(null);\n  const audioBuffersRef = useRef({});\n  const gameplaySourceRef = useRef(null);\n  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes in seconds\n  const [timerActive, setTimerActive] = useState(false);\n\n  useEffect(() => {\n    const initAudio = async () => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      const [gameplayBuffer, gameoverBuffer, gamewinBuffer] = await Promise.all([\n        fetch(gameplaySound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)),\n        fetch(gameoverSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)),\n        fetch(gamewinSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer))\n      ]);\n\n      audioBuffersRef.current = {\n        gameplay: gameplayBuffer,\n        gameover: gameoverBuffer,\n        gamewin: gamewinBuffer\n      };\n    };\n\n    initAudio();\n\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  const playSound = (soundName, loop = false) => {\n    if (audioContextRef.current && audioBuffersRef.current[soundName]) {\n      const source = audioContextRef.current.createBufferSource();\n      source.buffer = audioBuffersRef.current[soundName];\n      source.connect(audioContextRef.current.destination);\n      source.loop = loop;\n      source.start();\n      return source;\n    }\n    return null;\n  };\n\n  useEffect(() => {\n    if (isSoundOn && !gameplaySourceRef.current) {\n      gameplaySourceRef.current = playSound('gameplay', true);\n    } else if (!isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.stop();\n      gameplaySourceRef.current = null;\n    }\n  }, [isSoundOn]);\n\n  useEffect(() => {\n    fetchWord();\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (timerActive && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft((prevTime) => prevTime - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      setGameOver(true);\n      if (gameplaySourceRef.current) {\n        gameplaySourceRef.current.stop();\n        gameplaySourceRef.current = null;\n      }\n      playSound('gameover');\n      alert(`Time's up! The word was ${correctWord}`);\n    }\n    return () => clearInterval(timer);\n  }, [timerActive, timeLeft, correctWord]);\n  \n  const fetchWord = async () => {\n    setLoading(true);\n    const { wordSet, todaysWord } = await generateWordSet();\n    setWordSet(wordSet);\n    setCorrectWord(todaysWord);\n    setLoading(false);\n  };\n\n  const startGame = () => {\n    setGameStarted(true);\n    setShowInstructions(false);\n    fetchWord();\n    setTimerActive(true);\n  };\n\n  const handleKeyPress = useCallback((key) => {\n    if (gameOver || loading) return;\n\n    if (key === 'ENTER' || key === 'Enter') {\n      if (currentGuess.length !== WORD_LENGTH) return;\n      if (!wordSet.has(currentGuess.toUpperCase())) {\n        alert('Not in word list');\n        return;\n      }\n\n      const newGuesses = [...guesses];\n      newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess.toUpperCase();\n      setGuesses(newGuesses);\n      setCurrentGuess('');\n\n      if (currentGuess.toUpperCase() === correctWord) {\n        setGameOver(true);\n        setTimerActive(false);\n        triggerConfetti();\n        if (gameplaySourceRef.current) {\n          gameplaySourceRef.current.stop();\n          gameplaySourceRef.current = null;\n        }\n        playSound('gamewin');\n        alert('You won!');\n      } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n        setGameOver(true);\n        setTimerActive(false);\n        if (gameplaySourceRef.current) {\n          gameplaySourceRef.current.stop();\n          gameplaySourceRef.current = null;\n        }\n        playSound('gameover');\n        alert(`Game over! The word was ${correctWord}`);\n      }\n    } else if (key === 'BACK' || key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n    } else if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n      setCurrentGuess(prev => prev + key.toUpperCase());\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      handleKeyPress(event.key);\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]);\n\n  const keyboardLayout = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']\n  ];\n\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, []);\n\n  const triggerConfetti = () => {\n    const end = Date.now() + 3.5 * 1000;\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n\n    const frame = () => {\n      if (Date.now() > end) return;\n\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 0, y: 0.5 },\n        colors: colors,\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 1, y: 0.5 },\n        colors: colors,\n      });\n\n      requestAnimationFrame(frame);\n    };\n\n    frame();\n  };\n\n  const toggleSound = () => {\n    setIsSoundOn(!isSoundOn);\n  };\n\n  const getHint = () => {\n    if (hintsRemaining > 0 && !gameOver) {\n      let hintIndex;\n      do {\n        hintIndex = Math.floor(Math.random() * WORD_LENGTH);\n      } while (currentGuess[hintIndex] === correctWord[hintIndex]);\n\n      const positions = ['1st', '2nd', '3rd', '4th', '5th'];\n      const hintText = `The ${positions[hintIndex]} letter is ${correctWord[hintIndex]}`;\n      setHintMessage(hintText);\n      setHintsRemaining(prev => prev - 1);\n    }\n  };\n\n  const resetGame = () => {\n    setGameKey(prev => prev + 1);\n    setGuesses(Array(MAX_GUESSES).fill(''));\n    setCurrentGuess('');\n    setGameOver(false);\n    setHintsRemaining(2);\n    setHintMessage('');\n    setTimeLeft(300); // Reset to 5 minutes\n    setTimerActive(true);\n    fetchWord();\n  };\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n  \n  if (loading) {\n    return <div className=\"container\"><h1 className=\"title\">Loading...</h1></div>;\n  }\n\n  if (!gameStarted) {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Wordle Clone</h1>\n        {showInstructions ? (\n          <Instructions onClose={() => setShowInstructions(false)} />\n        ) : (\n          <button className=\"start-game-button\" onClick={startGame}>Start Wordle</button>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\" key={gameKey}>\n      <h1 className=\"title\">Wordle Clone</h1>\n      <div className=\"timer\">{formatTime(timeLeft)}</div>\n      <div className=\"game-controls\">\n        <button className=\"sound-toggle\" onClick={toggleSound}>\n          {isSoundOn ? '🔊' : '🔇'}\n        </button>\n        <button className=\"hint-button\" onClick={getHint} disabled={hintsRemaining === 0 || gameOver}>\n          💡 Hint ({hintsRemaining})\n        </button>\n        <button className=\"retry-button\" onClick={resetGame}>\n          🔄 Play Again\n        </button>\n      </div>\n      {hintMessage && <div className=\"hint-message\">{hintMessage}</div>}\n      <div className=\"grid\">\n        {guesses.map((guess, i) => (\n          <div className=\"row current-guess\" key={i}>\n            {Array.from({ length: WORD_LENGTH }).map((_, j) => (\n              <motion.div\n                className=\"cell\"\n                key={j}\n                initial={{ scale: 1 }}\n                animate={{\n                  scale: [1, 1.1, 1],\n                  rotate: [0, 10, -10, 0],\n                  backgroundColor: guess\n                    ? evaluateGuess(guess, correctWord)[j] === 'correct'\n                      ? '#6aaa64'\n                      : evaluateGuess(guess, correctWord)[j] === 'present'\n                      ? '#c9b458'\n                      : '#3a3a3c'\n                    : 'transparent',\n                  color: guess ? '#fff' : '#fff',\n                }}\n                transition={{ duration: 0.3 }}\n              >\n                {guess[j] || ''}\n              </motion.div>\n            ))}\n          </div>\n        ))}\n        <div className=\"row\">\n          {Array.from({ length: WORD_LENGTH }).map((_, i) => (\n            <motion.div\n              className=\"cell\"\n              key={i}\n              initial={{ scale: 1 }}\n              animate={{ scale: currentGuess[i] ? [1, 1.1, 1] : 1 }}\n              transition={{ duration: 0.3 }}\n            >\n              {currentGuess[i] || ''}\n            </motion.div>\n          ))}\n        </div>\n      </div>\n      <div className=\"keyboard\">\n        {keyboardLayout.map((row, i) => (\n          <div className=\"keyboard-row\" key={i}>\n            {row.map((key) => (\n              <motion.button\n                className=\"key\"\n                key={key}\n                data-key={key}\n                data-special-key={key === \"ENTER\" || key === \"BACK\" ? \"true\" : \"false\"}\n                style={{ backgroundColor: keyColors[key] }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={() => handleKeyPress(key)}\n              >\n                {key === \"ENTER\" ? \"Enter\" : key === \"BACK\" ? \"⌫\" : key}\n              </motion.button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Wordle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}