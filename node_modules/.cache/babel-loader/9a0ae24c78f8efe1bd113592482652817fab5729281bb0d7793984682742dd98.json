{"ast":null,"code":"// src/gameLogic.js\n\nconst WORD_LENGTH = 5;\nconst getRandomWord = async () => {\n  const response = await fetch(`https://random-word-api.herokuapp.com/word?number=1&swear=0`);\n  const data = await response.json();\n  return data[0];\n};\nconst getValidWords = async () => {\n  const response = await fetch(`https://random-word-api.herokuapp.com/word?number=1000&swear=0`);\n  const data = await response.json();\n  return data.filter(word => word.length === WORD_LENGTH);\n};\nexport const generateWordSet = async () => {\n  const wordSet = new Set(await getValidWords());\n  let todaysWord = await getRandomWord();\n\n  // Ensure the word is 5 letters long and exists in the word set\n  while (todaysWord.length !== WORD_LENGTH || !wordSet.has(todaysWord)) {\n    todaysWord = await getRandomWord();\n  }\n  return {\n    wordSet,\n    todaysWord\n  };\n};\nexport const evaluateGuess = (guess, correctWord) => {\n  const result = Array(WORD_LENGTH).fill('absent');\n  const correctWordArray = correctWord.split('');\n  const guessArray = guess.split('');\n\n  // First pass: check for correct letters in the correct position\n  guessArray.forEach((letter, index) => {\n    if (correctWordArray[index] === letter) {\n      result[index] = 'correct';\n      correctWordArray[index] = null; // Mark this letter as used\n    }\n  });\n\n  // Second pass: check for correct letters in the wrong position\n  guessArray.forEach((letter, index) => {\n    if (result[index] !== 'correct' && correctWordArray.includes(letter)) {\n      result[index] = 'present';\n      correctWordArray[correctWordArray.indexOf(letter)] = null; // Mark this letter as used\n    }\n  });\n  return result;\n};","map":{"version":3,"names":["WORD_LENGTH","getRandomWord","response","fetch","data","json","getValidWords","filter","word","length","generateWordSet","wordSet","Set","todaysWord","has","evaluateGuess","guess","correctWord","result","Array","fill","correctWordArray","split","guessArray","forEach","letter","index","includes","indexOf"],"sources":["/home/chirag/Documents/GitHub/wordle/src/gameLogic.js"],"sourcesContent":["// src/gameLogic.js\n\nconst WORD_LENGTH = 5;\n\nconst getRandomWord = async () => {\n  const response = await fetch(`https://random-word-api.herokuapp.com/word?number=1&swear=0`);\n  const data = await response.json();\n  return data[0];\n};\n\nconst getValidWords = async () => {\n  const response = await fetch(`https://random-word-api.herokuapp.com/word?number=1000&swear=0`);\n  const data = await response.json();\n  return data.filter(word => word.length === WORD_LENGTH);\n};\n\nexport const generateWordSet = async () => {\n  const wordSet = new Set(await getValidWords());\n  let todaysWord = await getRandomWord();\n\n  // Ensure the word is 5 letters long and exists in the word set\n  while (todaysWord.length !== WORD_LENGTH || !wordSet.has(todaysWord)) {\n    todaysWord = await getRandomWord();\n  }\n\n  return { wordSet, todaysWord };\n};\n\nexport const evaluateGuess = (guess, correctWord) => {\n  const result = Array(WORD_LENGTH).fill('absent');\n\n  const correctWordArray = correctWord.split('');\n  const guessArray = guess.split('');\n\n  // First pass: check for correct letters in the correct position\n  guessArray.forEach((letter, index) => {\n    if (correctWordArray[index] === letter) {\n      result[index] = 'correct';\n      correctWordArray[index] = null; // Mark this letter as used\n    }\n  });\n\n  // Second pass: check for correct letters in the wrong position\n  guessArray.forEach((letter, index) => {\n    if (result[index] !== 'correct' && correctWordArray.includes(letter)) {\n      result[index] = 'present';\n      correctWordArray[correctWordArray.indexOf(letter)] = null; // Mark this letter as used\n    }\n  });\n\n  return result;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,CAAC;AAErB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6DAA6D,CAAC;EAC3F,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAAC,CAAC,CAAC;AAChB,CAAC;AAED,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAgE,CAAC;EAC9F,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKT,WAAW,CAAC;AACzD,CAAC;AAED,OAAO,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,MAAMN,aAAa,CAAC,CAAC,CAAC;EAC9C,IAAIO,UAAU,GAAG,MAAMZ,aAAa,CAAC,CAAC;;EAEtC;EACA,OAAOY,UAAU,CAACJ,MAAM,KAAKT,WAAW,IAAI,CAACW,OAAO,CAACG,GAAG,CAACD,UAAU,CAAC,EAAE;IACpEA,UAAU,GAAG,MAAMZ,aAAa,CAAC,CAAC;EACpC;EAEA,OAAO;IAAEU,OAAO;IAAEE;EAAW,CAAC;AAChC,CAAC;AAED,OAAO,MAAME,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EACnD,MAAMC,MAAM,GAAGC,KAAK,CAACnB,WAAW,CAAC,CAACoB,IAAI,CAAC,QAAQ,CAAC;EAEhD,MAAMC,gBAAgB,GAAGJ,WAAW,CAACK,KAAK,CAAC,EAAE,CAAC;EAC9C,MAAMC,UAAU,GAAGP,KAAK,CAACM,KAAK,CAAC,EAAE,CAAC;;EAElC;EACAC,UAAU,CAACC,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IACpC,IAAIL,gBAAgB,CAACK,KAAK,CAAC,KAAKD,MAAM,EAAE;MACtCP,MAAM,CAACQ,KAAK,CAAC,GAAG,SAAS;MACzBL,gBAAgB,CAACK,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;IAClC;EACF,CAAC,CAAC;;EAEF;EACAH,UAAU,CAACC,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IACpC,IAAIR,MAAM,CAACQ,KAAK,CAAC,KAAK,SAAS,IAAIL,gBAAgB,CAACM,QAAQ,CAACF,MAAM,CAAC,EAAE;MACpEP,MAAM,CAACQ,KAAK,CAAC,GAAG,SAAS;MACzBL,gBAAgB,CAACA,gBAAgB,CAACO,OAAO,CAACH,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAC7D;EACF,CAAC,CAAC;EAEF,OAAOP,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}