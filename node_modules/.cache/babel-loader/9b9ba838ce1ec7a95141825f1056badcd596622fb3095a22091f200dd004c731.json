{"ast":null,"code":"// gameLogic.js\n\n// Fetch words from an API or a larger word list file\nexport const generateWordSet = async () => {\n  try {\n    // In a real-world scenario, you'd fetch from an API or read from a file\n    // For this example, we'll use a larger hardcoded list\n    const fiveLetterWords = [\"apple\", \"brick\", \"crane\", \"dough\", \"eagle\", \"flute\", \"grape\", \"hatch\", \"ivory\", \"joker\", \"knife\", \"lemon\", \"mango\", \"noble\", \"ocean\", \"piano\", \"quilt\", \"radio\", \"snake\", \"table\", \"umbra\", \"vocal\", \"witch\", \"xerox\", \"yacht\", \"zebra\"];\n    const wordSet = new Set(fiveLetterWords.map(word => word.toUpperCase()));\n    const todaysWord = fiveLetterWords[Math.floor(Math.random() * fiveLetterWords.length)].toUpperCase();\n    return {\n      wordSet,\n      todaysWord\n    };\n  } catch (error) {\n    console.error(\"Error generating word set:\", error);\n    throw error;\n  }\n};\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArray = guess.split('');\n  const correctWordArray = correctWord.split('');\n  const result = Array(guess.length).fill('absent');\n  const usedIndices = new Set();\n\n  // First pass: mark correct letters\n  for (let i = 0; i < guessArray.length; i++) {\n    if (guessArray[i] === correctWordArray[i]) {\n      result[i] = 'correct';\n      usedIndices.add(i);\n    }\n  }\n\n  // Second pass: mark present letters\n  for (let i = 0; i < guessArray.length; i++) {\n    if (result[i] !== 'correct') {\n      const correctIndex = correctWordArray.findIndex((letter, index) => letter === guessArray[i] && !usedIndices.has(index));\n      if (correctIndex !== -1) {\n        result[i] = 'present';\n        usedIndices.add(correctIndex);\n      }\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["generateWordSet","fiveLetterWords","wordSet","Set","map","word","toUpperCase","todaysWord","Math","floor","random","length","error","console","evaluateGuess","guess","correctWord","guessArray","split","correctWordArray","result","Array","fill","usedIndices","i","add","correctIndex","findIndex","letter","index","has"],"sources":["/home/chirag/Documents/GitHub/Wordle/src/gameLogic.js"],"sourcesContent":["// gameLogic.js\n\n// Fetch words from an API or a larger word list file\nexport const generateWordSet = async () => {\n  try {\n    // In a real-world scenario, you'd fetch from an API or read from a file\n    // For this example, we'll use a larger hardcoded list\n    const fiveLetterWords = [\n      \"apple\", \"brick\", \"crane\", \"dough\", \"eagle\", \"flute\", \"grape\", \n      \"hatch\", \"ivory\", \"joker\", \"knife\", \"lemon\", \"mango\", \"noble\", \n      \"ocean\", \"piano\", \"quilt\", \"radio\", \"snake\", \"table\", \"umbra\", \n      \"vocal\", \"witch\", \"xerox\", \"yacht\", \"zebra\"\n    ];\n\n    const wordSet = new Set(fiveLetterWords.map(word => word.toUpperCase()));\n    const todaysWord = fiveLetterWords[Math.floor(Math.random() * fiveLetterWords.length)].toUpperCase();\n\n    return { wordSet, todaysWord };\n  } catch (error) {\n    console.error(\"Error generating word set:\", error);\n    throw error;\n  }\n};\n\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArray = guess.split('');\n  const correctWordArray = correctWord.split('');\n  const result = Array(guess.length).fill('absent');\n  const usedIndices = new Set();\n\n  // First pass: mark correct letters\n  for (let i = 0; i < guessArray.length; i++) {\n    if (guessArray[i] === correctWordArray[i]) {\n      result[i] = 'correct';\n      usedIndices.add(i);\n    }\n  }\n\n  // Second pass: mark present letters\n  for (let i = 0; i < guessArray.length; i++) {\n    if (result[i] !== 'correct') {\n      const correctIndex = correctWordArray.findIndex((letter, index) => \n        letter === guessArray[i] && !usedIndices.has(index)\n      );\n      if (correctIndex !== -1) {\n        result[i] = 'present';\n        usedIndices.add(correctIndex);\n      }\n    }\n  }\n\n  return result;\n};"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF;IACA;IACA,MAAMC,eAAe,GAAG,CACtB,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAC7D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAC7D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAC7D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAC5C;IAED,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAACF,eAAe,CAACG,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;IACxE,MAAMC,UAAU,GAAGN,eAAe,CAACO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGT,eAAe,CAACU,MAAM,CAAC,CAAC,CAACL,WAAW,CAAC,CAAC;IAEpG,OAAO;MAAEJ,OAAO;MAAEK;IAAW,CAAC;EAChC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EACnD,MAAMC,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,EAAE,CAAC;EAClC,MAAMC,gBAAgB,GAAGH,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;EAC9C,MAAME,MAAM,GAAGC,KAAK,CAACN,KAAK,CAACJ,MAAM,CAAC,CAACW,IAAI,CAAC,QAAQ,CAAC;EACjD,MAAMC,WAAW,GAAG,IAAIpB,GAAG,CAAC,CAAC;;EAE7B;EACA,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,CAACN,MAAM,EAAEa,CAAC,EAAE,EAAE;IAC1C,IAAIP,UAAU,CAACO,CAAC,CAAC,KAAKL,gBAAgB,CAACK,CAAC,CAAC,EAAE;MACzCJ,MAAM,CAACI,CAAC,CAAC,GAAG,SAAS;MACrBD,WAAW,CAACE,GAAG,CAACD,CAAC,CAAC;IACpB;EACF;;EAEA;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,CAACN,MAAM,EAAEa,CAAC,EAAE,EAAE;IAC1C,IAAIJ,MAAM,CAACI,CAAC,CAAC,KAAK,SAAS,EAAE;MAC3B,MAAME,YAAY,GAAGP,gBAAgB,CAACQ,SAAS,CAAC,CAACC,MAAM,EAAEC,KAAK,KAC5DD,MAAM,KAAKX,UAAU,CAACO,CAAC,CAAC,IAAI,CAACD,WAAW,CAACO,GAAG,CAACD,KAAK,CACpD,CAAC;MACD,IAAIH,YAAY,KAAK,CAAC,CAAC,EAAE;QACvBN,MAAM,CAACI,CAAC,CAAC,GAAG,SAAS;QACrBD,WAAW,CAACE,GAAG,CAACC,YAAY,CAAC;MAC/B;IACF;EACF;EAEA,OAAON,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}