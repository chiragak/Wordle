{"ast":null,"code":"var _jsxFileName = \"/home/chirag/Documents/GitHub/Wordle/src/Wordle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet } from './gameLogic';\nimport './Wordle.css';\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\nconst keyboardColors = ['#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'];\nconst Wordle = () => {\n  _s();\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [isSoundOn, setIsSoundOn] = useState(false);\n  const audioContextRef = useRef(null);\n  const audioBuffersRef = useRef({});\n  const gameplaySourceRef = useRef(null);\n  const [hintsUsed, setHintsUsed] = useState(0);\n  const [hint1, setHint1] = useState('');\n  const [hint2, setHint2] = useState('');\n  const fetchWord = async () => {\n    setLoading(true);\n    const {\n      wordSet,\n      todaysWord,\n      hint1,\n      hint2\n    } = await generateWordSet();\n    setWordSet(wordSet);\n    setCorrectWord(todaysWord);\n    setHint1(hint1);\n    setHint2(hint2);\n    setLoading(false);\n  };\n  useEffect(() => {\n    const initAudio = async () => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      const [gameplayBuffer, gameoverBuffer, gamewinBuffer] = await Promise.all([fetch(gameplaySound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)), fetch(gameoverSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)), fetch(gamewinSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer))]);\n      audioBuffersRef.current = {\n        gameplay: gameplayBuffer,\n        gameover: gameoverBuffer,\n        gamewin: gamewinBuffer\n      };\n    };\n    initAudio();\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n  const playSound = (soundName, loop = false) => {\n    if (audioContextRef.current && audioBuffersRef.current[soundName]) {\n      const source = audioContextRef.current.createBufferSource();\n      source.buffer = audioBuffersRef.current[soundName];\n      source.connect(audioContextRef.current.destination);\n      source.loop = loop;\n      source.start();\n      return source;\n    }\n    return null;\n  };\n  useEffect(() => {\n    if (isSoundOn && !gameplaySourceRef.current) {\n      gameplaySourceRef.current = playSound('gameplay', true);\n    } else if (!isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.stop(0);\n      gameplaySourceRef.current = null;\n    }\n  }, [isSoundOn]);\n  useEffect(() => {\n    fetchWord();\n  }, []);\n  const handleKeyPress = useCallback(key => {\n    if (gameOver || loading) return;\n    switch (key) {\n      case 'ENTER':\n      case 'Enter':\n        if (currentGuess.length !== WORD_LENGTH) return;\n        if (!wordSet.has(currentGuess.toUpperCase())) {\n          alert('Not in word list');\n          return;\n        }\n        const newGuesses = [...guesses];\n        newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess.toUpperCase();\n        setGuesses(newGuesses);\n        setCurrentGuess('');\n        if (currentGuess.toUpperCase() === correctWord) {\n          setGameOver(true);\n          triggerConfetti();\n          if (gameplaySourceRef.current) {\n            gameplaySourceRef.current.stop(0);\n            gameplaySourceRef.current = null;\n          }\n          playSound('gamewin');\n          alert('You won!');\n        } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n          setGameOver(true);\n          if (gameplaySourceRef.current) {\n            gameplaySourceRef.current.stop(0);\n            gameplaySourceRef.current = null;\n          }\n          playSound('gameover');\n          alert(`Game over! The word was ${correctWord}`);\n        }\n        break;\n      case 'BACK':\n      case 'Backspace':\n        setCurrentGuess(prev => prev.slice(0, -1));\n        break;\n      default:\n        if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n          setCurrentGuess(prev => prev + key.toUpperCase());\n        }\n        break;\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      handleKeyPress(event.key);\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]);\n  const keyboardLayout = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']];\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, [keyboardLayout]);\n  const triggerConfetti = () => {\n    const end = Date.now() + 3.5 * 1000;\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n    const frame = () => {\n      if (Date.now() > end) return;\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 0,\n          y: 0.5\n        },\n        colors: colors\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: {\n          x: 1,\n          y: 0.5\n        },\n        colors: colors\n      });\n      requestAnimationFrame(frame);\n    };\n    frame();\n  };\n  const toggleSound = () => {\n    setIsSoundOn(!isSoundOn);\n  };\n  const useHint = () => {\n    if (hintsUsed === 0) {\n      alert(`Hint 1: ${hint1}`);\n    } else if (hintsUsed === 1) {\n      alert(`Hint 2: ${hint2}`);\n    }\n    setHintsUsed(hintsUsed + 1);\n  };\n  const resetGame = () => {\n    setGuesses(Array(MAX_GUESSES).fill(''));\n    setCurrentGuess('');\n    setGameOver(false);\n    setHintsUsed(0);\n    setHint1('');\n    setHint2('');\n    fetchWord();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Wordle Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: keyboardLayout.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard-row\",\n        children: row.map((key, colIndex) => /*#__PURE__*/_jsxDEV(motion.button, {\n          className: \"keyboard-key\",\n          style: {\n            backgroundColor: keyColors[key]\n          },\n          onClick: () => {\n            if (key === 'ENTER' || key === 'BACK') {\n              handleKeyPress(key);\n            } else {\n              handleKeyPress(key.toLowerCase());\n            }\n          },\n          whileHover: {\n            scale: 1.1\n          },\n          whileTap: {\n            scale: 0.9\n          },\n          children: key\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"guesses-left\",\n        children: [\"Guesses left: \", MAX_GUESSES - guesses.filter(guess => guess !== '').length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hint-button\",\n        onClick: useHint,\n        disabled: hintsUsed >= 2,\n        children: [\"Use Hint (\", 2 - hintsUsed, \" left)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"sound-toggle\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isSoundOn,\n          onChange: toggleSound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), \"Sound On/Off\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(Wordle, \"qL3Ci6/AVmfYoYYC7PpoxdUdjYs=\");\n_c = Wordle;\nexport default Wordle;\nvar _c;\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useMemo","motion","confetti","generateWordSet","gameplaySound","gameoverSound","gamewinSound","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_GUESSES","keyboardColors","Wordle","_s","wordSet","setWordSet","Set","correctWord","setCorrectWord","guesses","setGuesses","Array","fill","currentGuess","setCurrentGuess","gameOver","setGameOver","loading","setLoading","isSoundOn","setIsSoundOn","audioContextRef","audioBuffersRef","gameplaySourceRef","hintsUsed","setHintsUsed","hint1","setHint1","hint2","setHint2","fetchWord","todaysWord","initAudio","current","window","AudioContext","webkitAudioContext","gameplayBuffer","gameoverBuffer","gamewinBuffer","Promise","all","fetch","then","res","arrayBuffer","decodeAudioData","gameplay","gameover","gamewin","close","playSound","soundName","loop","source","createBufferSource","buffer","connect","destination","start","stop","handleKeyPress","key","length","has","toUpperCase","alert","newGuesses","findIndex","guess","triggerConfetti","prev","slice","match","handleKeyDown","event","addEventListener","removeEventListener","keyboardLayout","keyColors","colors","flat","forEach","index","end","Date","now","frame","particleCount","angle","spread","startVelocity","origin","x","y","requestAnimationFrame","toggleSound","useHint","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","rowIndex","colIndex","button","style","backgroundColor","onClick","toLowerCase","whileHover","scale","whileTap","filter","disabled","type","checked","onChange","_c","$RefreshReg$"],"sources":["/home/chirag/Documents/GitHub/Wordle/src/Wordle.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { generateWordSet } from './gameLogic';\nimport './Wordle.css';\n\nimport gameplaySound from './assets/gameplay.mp3';\nimport gameoverSound from './assets/gameover.mp3';\nimport gamewinSound from './assets/gamewin.mp3';\n\nconst WORD_LENGTH = 5;\nconst MAX_GUESSES = 6;\n\nconst keyboardColors = [\n  '#FF0000', '#FF3300', '#FF6600', '#FF9900', '#FFCC00', \n  '#FFFF00', '#CCFF00', '#99FF00', '#66FF00', '#33FF00'\n];\n\nconst Wordle = () => {\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(MAX_GUESSES).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [isSoundOn, setIsSoundOn] = useState(false);\n  const audioContextRef = useRef(null);\n  const audioBuffersRef = useRef({});\n  const gameplaySourceRef = useRef(null);\n\n  const [hintsUsed, setHintsUsed] = useState(0);\n  const [hint1, setHint1] = useState('');\n  const [hint2, setHint2] = useState('');\n\n  const fetchWord = async () => {\n    setLoading(true);\n    const { wordSet, todaysWord, hint1, hint2 } = await generateWordSet();\n    setWordSet(wordSet);\n    setCorrectWord(todaysWord);\n    setHint1(hint1);\n    setHint2(hint2);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    const initAudio = async () => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      const [gameplayBuffer, gameoverBuffer, gamewinBuffer] = await Promise.all([\n        fetch(gameplaySound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)),\n        fetch(gameoverSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer)),\n        fetch(gamewinSound).then(res => res.arrayBuffer()).then(arrayBuffer => audioContextRef.current.decodeAudioData(arrayBuffer))\n      ]);\n\n      audioBuffersRef.current = {\n        gameplay: gameplayBuffer,\n        gameover: gameoverBuffer,\n        gamewin: gamewinBuffer\n      };\n    };\n\n    initAudio();\n\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  const playSound = (soundName, loop = false) => {\n    if (audioContextRef.current && audioBuffersRef.current[soundName]) {\n      const source = audioContextRef.current.createBufferSource();\n      source.buffer = audioBuffersRef.current[soundName];\n      source.connect(audioContextRef.current.destination);\n      source.loop = loop;\n      source.start();\n      return source;\n    }\n    return null;\n  };\n\n  useEffect(() => {\n    if (isSoundOn && !gameplaySourceRef.current) {\n      gameplaySourceRef.current = playSound('gameplay', true);\n    } else if (!isSoundOn && gameplaySourceRef.current) {\n      gameplaySourceRef.current.stop(0);\n      gameplaySourceRef.current = null;\n    }\n  }, [isSoundOn]);\n\n  useEffect(() => {\n    fetchWord();\n  }, []);\n\n  const handleKeyPress = useCallback((key) => {\n    if (gameOver || loading) return;\n\n    switch (key) {\n      case 'ENTER':\n      case 'Enter':\n        if (currentGuess.length !== WORD_LENGTH) return;\n        if (!wordSet.has(currentGuess.toUpperCase())) {\n          alert('Not in word list');\n          return;\n        }\n\n        const newGuesses = [...guesses];\n        newGuesses[guesses.findIndex(guess => guess === '')] = currentGuess.toUpperCase();\n        setGuesses(newGuesses);\n        setCurrentGuess('');\n\n        if (currentGuess.toUpperCase() === correctWord) {\n          setGameOver(true);\n          triggerConfetti();\n          if (gameplaySourceRef.current) {\n            gameplaySourceRef.current.stop(0);\n            gameplaySourceRef.current = null;\n          }\n          playSound('gamewin');\n          alert('You won!');\n        } else if (newGuesses[MAX_GUESSES - 1] !== '') {\n          setGameOver(true);\n          if (gameplaySourceRef.current) {\n            gameplaySourceRef.current.stop(0);\n            gameplaySourceRef.current = null;\n          }\n          playSound('gameover');\n          alert(`Game over! The word was ${correctWord}`);\n        }\n        break;\n      case 'BACK':\n      case 'Backspace':\n        setCurrentGuess(prev => prev.slice(0, -1));\n        break;\n      default:\n        if (currentGuess.length < WORD_LENGTH && key.length === 1 && key.match(/[a-z]/i)) {\n          setCurrentGuess(prev => prev + key.toUpperCase());\n        }\n        break;\n    }\n  }, [currentGuess, guesses, wordSet, correctWord, gameOver, loading]);\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      handleKeyPress(event.key);\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyPress]);\n\n  const keyboardLayout = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACK']\n  ];\n\n  const keyColors = useMemo(() => {\n    const colors = {};\n    keyboardLayout.flat().forEach((key, index) => {\n      colors[key] = keyboardColors[index % keyboardColors.length];\n    });\n    return colors;\n  }, [keyboardLayout]);\n\n  const triggerConfetti = () => {\n    const end = Date.now() + 3.5 * 1000;\n    const colors = [\"#a786ff\", \"#fd8bbc\", \"#eca184\", \"#f8deb1\"];\n\n    const frame = () => {\n      if (Date.now() > end) return;\n\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 0, y: 0.5 },\n        colors: colors,\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        startVelocity: 60,\n        origin: { x: 1, y: 0.5 },\n        colors: colors,\n      });\n\n      requestAnimationFrame(frame);\n    };\n\n    frame();\n  };\n\n  const toggleSound = () => {\n    setIsSoundOn(!isSoundOn);\n  };\n\n  const useHint = () => {\n    if (hintsUsed === 0) {\n      alert(`Hint 1: ${hint1}`);\n    } else if (hintsUsed === 1) {\n      alert(`Hint 2: ${hint2}`);\n    }\n    setHintsUsed(hintsUsed + 1);\n  };\n\n  const resetGame = () => {\n    setGuesses(Array(MAX_GUESSES).fill(''));\n    setCurrentGuess('');\n    setGameOver(false);\n    setHintsUsed(0);\n    setHint1('');\n    setHint2('');\n    fetchWord();\n  };\n\n  if (loading) {\n    return <div className=\"container\"><h1 className=\"title\">Loading...</h1></div>;\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Wordle Game</h1>\n      <div className=\"keyboard\">\n        {keyboardLayout.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"keyboard-row\">\n            {row.map((key, colIndex) => (\n              <motion.button\n                key={colIndex}\n                className=\"keyboard-key\"\n                style={{ backgroundColor: keyColors[key] }}\n                onClick={() => {\n                  if (key === 'ENTER' || key === 'BACK') {\n                    handleKeyPress(key);\n                  } else {\n                    handleKeyPress(key.toLowerCase());\n                  }\n                }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n              >\n                {key}\n              </motion.button>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"game-info\">\n        <p className=\"guesses-left\">Guesses left: {MAX_GUESSES - guesses.filter(guess => guess !== '').length}</p>\n        <button className=\"hint-button\" onClick={useHint} disabled={hintsUsed >= 2}>Use Hint ({2 - hintsUsed} left)</button>\n        <button className=\"reset-button\" onClick={resetGame}>Reset Game</button>\n        <label className=\"sound-toggle\">\n          <input type=\"checkbox\" checked={isSoundOn} onChange={toggleSound} />\n          Sound On/Off\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default Wordle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}