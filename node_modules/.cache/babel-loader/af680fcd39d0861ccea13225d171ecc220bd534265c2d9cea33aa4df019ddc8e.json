{"ast":null,"code":"// src/gameLogic.js\n\nexport const WORD_LENGTH = 5;\nexport const MAX_GUESSES = 6;\nexport const generateWordSet = async () => {\n  const corsProxy = \"https://cors-anywhere.herokuapp.com/\";\n  const apiUrl = `https://random-word-api.herokuapp.com/word?length=${WORD_LENGTH}`;\n  const wordSetUrl = `https://random-word-api.herokuapp.com/all?length=${WORD_LENGTH}`;\n  try {\n    const response = await fetch(`${corsProxy}${apiUrl}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch word');\n    }\n    const [todaysWord] = await response.json();\n    const wordSetResponse = await fetch(`${corsProxy}${wordSetUrl}`);\n    if (!wordSetResponse.ok) {\n      throw new Error('Failed to fetch word set');\n    }\n    const wordList = await wordSetResponse.json();\n    const wordSet = new Set(wordList.map(word => word.toUpperCase()));\n    return {\n      wordSet,\n      todaysWord: todaysWord.toUpperCase()\n    };\n  } catch (error) {\n    console.error('Error fetching word:', error);\n    // Fallback to a default word and set if API fails\n    return {\n      wordSet: new Set(['APPLE', 'BEACH', 'CHAIR', 'DANCE', 'EAGLE']),\n      todaysWord: 'APPLE'\n    };\n  }\n};\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArray = guess.split('');\n  const correctArray = correctWord.split('');\n  const result = Array(WORD_LENGTH).fill('absent');\n\n  // Check for correct letters in correct positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (guessArray[i] === correctArray[i]) {\n      result[i] = 'correct';\n      correctArray[i] = null;\n    }\n  }\n\n  // Check for correct letters in wrong positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (result[i] === 'absent' && correctArray.includes(guessArray[i])) {\n      result[i] = 'present';\n      correctArray[correctArray.indexOf(guessArray[i])] = null;\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["WORD_LENGTH","MAX_GUESSES","generateWordSet","corsProxy","apiUrl","wordSetUrl","response","fetch","ok","Error","todaysWord","json","wordSetResponse","wordList","wordSet","Set","map","word","toUpperCase","error","console","evaluateGuess","guess","correctWord","guessArray","split","correctArray","result","Array","fill","i","includes","indexOf"],"sources":["/home/chirag/Documents/GitHub/wordle/src/gameLogic.js"],"sourcesContent":["// src/gameLogic.js\n\nexport const WORD_LENGTH = 5;\nexport const MAX_GUESSES = 6;\n\nexport const generateWordSet = async () => {\n  const corsProxy = \"https://cors-anywhere.herokuapp.com/\";\n  const apiUrl = `https://random-word-api.herokuapp.com/word?length=${WORD_LENGTH}`;\n  const wordSetUrl = `https://random-word-api.herokuapp.com/all?length=${WORD_LENGTH}`;\n  \n  try {\n    const response = await fetch(`${corsProxy}${apiUrl}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch word');\n    }\n    const [todaysWord] = await response.json();\n\n    const wordSetResponse = await fetch(`${corsProxy}${wordSetUrl}`);\n    if (!wordSetResponse.ok) {\n      throw new Error('Failed to fetch word set');\n    }\n    const wordList = await wordSetResponse.json();\n    const wordSet = new Set(wordList.map(word => word.toUpperCase()));\n\n    return { wordSet, todaysWord: todaysWord.toUpperCase() };\n  } catch (error) {\n    console.error('Error fetching word:', error);\n    // Fallback to a default word and set if API fails\n    return { \n      wordSet: new Set(['APPLE', 'BEACH', 'CHAIR', 'DANCE', 'EAGLE']), \n      todaysWord: 'APPLE' \n    };\n  }\n};\n\nexport const evaluateGuess = (guess, correctWord) => {\n  const guessArray = guess.split('');\n  const correctArray = correctWord.split('');\n  const result = Array(WORD_LENGTH).fill('absent');\n\n  // Check for correct letters in correct positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (guessArray[i] === correctArray[i]) {\n      result[i] = 'correct';\n      correctArray[i] = null;\n    }\n  }\n\n  // Check for correct letters in wrong positions\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    if (result[i] === 'absent' && correctArray.includes(guessArray[i])) {\n      result[i] = 'present';\n      correctArray[correctArray.indexOf(guessArray[i])] = null;\n    }\n  }\n\n  return result;\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,WAAW,GAAG,CAAC;AAC5B,OAAO,MAAMC,WAAW,GAAG,CAAC;AAE5B,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,SAAS,GAAG,sCAAsC;EACxD,MAAMC,MAAM,GAAG,qDAAqDJ,WAAW,EAAE;EACjF,MAAMK,UAAU,GAAG,oDAAoDL,WAAW,EAAE;EAEpF,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,SAAS,GAAGC,MAAM,EAAE,CAAC;IACrD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,MAAM,CAACC,UAAU,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAE1C,MAAMC,eAAe,GAAG,MAAML,KAAK,CAAC,GAAGJ,SAAS,GAAGE,UAAU,EAAE,CAAC;IAChE,IAAI,CAACO,eAAe,CAACJ,EAAE,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,MAAMI,QAAQ,GAAG,MAAMD,eAAe,CAACD,IAAI,CAAC,CAAC;IAC7C,MAAMG,OAAO,GAAG,IAAIC,GAAG,CAACF,QAAQ,CAACG,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;IAEjE,OAAO;MAAEJ,OAAO;MAAEJ,UAAU,EAAEA,UAAU,CAACQ,WAAW,CAAC;IAAE,CAAC;EAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C;IACA,OAAO;MACLL,OAAO,EAAE,IAAIC,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;MAC/DL,UAAU,EAAE;IACd,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMW,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EACnD,MAAMC,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,EAAE,CAAC;EAClC,MAAMC,YAAY,GAAGH,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;EAC1C,MAAME,MAAM,GAAGC,KAAK,CAAC5B,WAAW,CAAC,CAAC6B,IAAI,CAAC,QAAQ,CAAC;;EAEhD;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,WAAW,EAAE8B,CAAC,EAAE,EAAE;IACpC,IAAIN,UAAU,CAACM,CAAC,CAAC,KAAKJ,YAAY,CAACI,CAAC,CAAC,EAAE;MACrCH,MAAM,CAACG,CAAC,CAAC,GAAG,SAAS;MACrBJ,YAAY,CAACI,CAAC,CAAC,GAAG,IAAI;IACxB;EACF;;EAEA;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,WAAW,EAAE8B,CAAC,EAAE,EAAE;IACpC,IAAIH,MAAM,CAACG,CAAC,CAAC,KAAK,QAAQ,IAAIJ,YAAY,CAACK,QAAQ,CAACP,UAAU,CAACM,CAAC,CAAC,CAAC,EAAE;MAClEH,MAAM,CAACG,CAAC,CAAC,GAAG,SAAS;MACrBJ,YAAY,CAACA,YAAY,CAACM,OAAO,CAACR,UAAU,CAACM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;IAC1D;EACF;EAEA,OAAOH,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}